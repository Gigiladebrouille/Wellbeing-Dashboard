import numpy as np
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import scipy.stats as stats
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report, recall_score, precision_score, f1_score
from scipy.stats import pearsonr, f_oneway, chi2_contingency


def interpret_correlation(corr_value):
    if corr_value > 0.8:
        return "Tr√®s forte corr√©lation positive", "green"
    elif 0.6 < corr_value <= 0.8:
        return "Forte corr√©lation positive", "lime"
    elif 0.4 < corr_value <= 0.6:
        return "Corr√©lation positive mod√©r√©e", "yellow"
    elif 0.2 < corr_value <= 0.4:
        return "Faible corr√©lation positive", "orange"
    elif -0.2 < corr_value <= 0.2:
        return "Pas de corr√©lation", "grey"
    elif -0.4 < corr_value <= -0.2:
        return "Faible corr√©lation n√©gative", "pink"
    elif -0.6 < corr_value <= -0.4:
        return "Corr√©lation n√©gative mod√©r√©e", "purple"
    elif -0.8 < corr_value <= -0.6:
        return "Forte corr√©lation n√©gative", "red"
    else:
        return "Tr√®s forte corr√©lation n√©gative", "darkred"

st.title('SRE-Optimized Workforce Wellness Dashboard')

# Lire les donn√©es √† partir du fichier csv
data = pd.read_csv("Dashboard.csv")

data_visual = data.copy()

# Remplacement des valeurs 0 et 1 par "Non" et "Oui" respectivement
data_visual["left"] = data_visual["left"].replace({0: "Non", 1: "Oui"})
data_visual["work_accident"] = data_visual["work_accident"].replace({0: "La chance", 1: "Pas de p√¥t"})
data_visual["promotion_last_5years"] = data_visual["promotion_last_5years"].replace({False: "Non", True: "Oui"})

# D√©finir le menu de navigation
menu = ['Accueil','Donn√©es Brutes' ,'Statistiques', 'Analyse univari√©e', 'Analyse bivari√©e', 'Corr√©lation', 'Contingence', 'ANOVA', 'Multivari√©s', 'R√©gression logistique']
choice = st.sidebar.selectbox('Menu', menu)

# Afficher l'application s√©lectionn√©e
if choice == 'Accueil':
    st.title("Bienvenue dans le Dashboard d'Analyse du Bien-√™tre des Employ√©s")
    st.write("""
    ## √Ä propos de ce Dashboard
    Ce dashboard est con√ßu pour fournir des insights d√©taill√©s sur le bien-√™tre des employ√©s au sein de l'organisation. Il utilise des donn√©es collect√©es sur divers aspects du travail et de la vie personnelle des employ√©s pour g√©n√©rer des analyses utiles.

    ### Fonctionnalit√©s
    - **Analyse Univari√©e et Bivari√©e**: Pour explorer chaque variable en d√©tail et comprendre les relations entre deux variables.
    - **Corr√©lation et Contingence**: Pour comprendre les relations complexes entre les variables.
    - **ANOVA et R√©gression Logistique**: Pour des analyses plus avanc√©es et des pr√©dictions.
    - **Statistiques Descriptives**: Pour obtenir un r√©sum√© statistique des donn√©es.
    
    ### Comment √ßa marche
    1. **Naviguez** vers l'onglet de votre choix √† partir du menu lat√©ral.
    2. **Interagissez** avec les widgets pour filtrer et trier les donn√©es selon vos besoins.
    3. **Consultez** les graphiques et les tableaux pour obtenir des insights.
    4. **Utilisez** les informations pour prendre des d√©cisions √©clair√©es concernant le bien-√™tre des employ√©s.

    Pour commencer, cliquez sur l'un des onglets dans le menu de gauche.
    """)

    st.title('Analyse du bien-√™tre des employ√©s')
    st.write("""
    ## Contexte
    Le bien-√™tre des employ√©s est crucial pour le succ√®s √† long terme de toute organisation. Un employ√© heureux est souvent plus productif, engag√© et loyal envers l'entreprise. Ce dashboard vise √† aider les d√©partements des ressources humaines et les gestionnaires √† avoir une meilleure compr√©hension du bien-√™tre des employ√©s.

    ### Objectif
    Ce dashboard a pour but d'aider les RH √† avoir une visualisation claire et des analyses approfondies sur le bien-√™tre des employ√©s. Il utilise des donn√©es sur divers aspects tels que le niveau de satisfaction, l'√©valuation de la performance, le nombre de projets, etc., pour fournir des insights utiles.

    ### Base de donn√©es
    Ci-dessous, vous avez acc√®s √† la base de donn√©es de tous nos employ√©s, ainsi qu'aux variables qui seront prises en compte dans vos futures analyses. Chaque onglet du dashboard vous permet d'explorer ces variables de diff√©rentes mani√®res pour obtenir des insights pr√©cieux.
    """)

    
elif choice == 'Donn√©es Brutes':
    st.title('Donn√©es Brutes')
    st.write(data_visual)

elif choice == 'Statistiques':
    st.title('Statistiques descriptives des variables num√©riques')
    st.write("""
    ## √Ä propos de cet onglet
    Cet onglet fournit des statistiques descriptives sur les variables num√©riques de votre ensemble de donn√©es.
    
    ### Caract√©ristiques
    - **Vue d'ensemble des statistiques**: Affiche des mesures telles que la moyenne, la m√©diane, l'√©cart-type, etc.
    - **Statistiques cl√©s**: Met en √©vidence des statistiques importantes pour chaque variable num√©rique.
    - **Percentiles**: Affiche les percentiles s√©lectionn√©s pour chaque variable num√©rique.
    
    ### Comment l'utiliser
    1. **Naviguez** vers cet onglet √† partir du menu lat√©ral.
    2. **Consultez** les statistiques pour obtenir des insights sur les variables num√©riques.
    3. **Utilisez** les widgets interactifs pour explorer davantage.
    """)

    # Extraire les colonnes num√©riques
    numeric_cols = data.select_dtypes(include=['int64', 'float64']).columns

    # Calculer les statistiques descriptives
    stats = data[numeric_cols].describe()

    # Afficher le tableau de statistiques
    st.write("Vue d'ensemble des statistiques :")
    st.dataframe(stats)

    # Choix des percentiles
    percentile_choice = st.selectbox("Choisissez le percentile √† afficher :", [25, 50, 75, 90, 95, 99])

    # Mettre en √©vidence des statistiques cl√©s avec des widgets
    st.write("Statistiques cl√©s :")

    col1, col2, col3 = st.columns(3)

    for col in numeric_cols:
        mean_val = data[col].mean()
        median_val = data[col].median()
        std_val = data[col].std()

        # Identifier les valeurs aberrantes
        outlier_condition = np.abs(data[col] - mean_val) > 2 * std_val
        num_outliers = np.sum(outlier_condition)

        # Utiliser un code couleur pour les valeurs aberrantes
        outlier_color = 'red' if num_outliers > 0 else 'green'

        with col1:
            st.metric(label=f"Moyenne de {col}", value=f"{mean_val:.2f}")
        with col2:
            st.metric(label=f"M√©diane de {col}", value=f"{median_val:.2f}")
        with col3:
            st.metric(label=f"√âcart-type de {col}", value=f"{std_val:.2f}")

        st.write(f"Nombre de valeurs aberrantes pour {col} : ", num_outliers, f"üö®" if num_outliers > 0 else "‚úÖ")

        # Afficher les percentiles
        percentile_val = np.percentile(data[col], percentile_choice)
        st.write(f"Le percentile {percentile_choice} pour {col} est {percentile_val:.2f}")

elif choice == 'Analyse univari√©e':
    
    st.title('Analyse Univari√©e')
    st.write("""
    ## √Ä propos de cet onglet
    L'analyse univari√©e est l'√©tude statistique d'une seule variable. Elle est utilis√©e pour obtenir un r√©sum√© et des insights sur les donn√©es.
    
    ### Caract√©ristiques
    - **Boxplot**: Pour visualiser la distribution des donn√©es.
    - **Statistiques descriptives**: Pour obtenir des mesures telles que la moyenne, la m√©diane, etc.
    
    ### Comment l'utiliser
    1. **Naviguez** vers cet onglet √† partir du menu lat√©ral.
    2. **S√©lectionnez** la variable que vous souhaitez analyser.
    3. **Consultez** les graphiques et les statistiques pour obtenir des insights sur la variable.
    """)

    # S√©lectionner la variable √† afficher
    variable = st.selectbox('S√©lectionnez une variable', data.select_dtypes(include=['int64', 'float64', 'object']).columns)

    # Cr√©er des colonnes pour les graphiques
    col1, col2, col3 = st.columns(3)

    # Histogramme
    with col1:
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.hist(data[variable], bins=30, color='skyblue', edgecolor='black')
        ax.set_xlabel('Valeur')
        ax.set_ylabel('Fr√©quence')
        ax.set_title('Histogramme')
        st.pyplot(fig)

    # Boxplot (seulement pour les variables num√©riques)
    if data[variable].dtype in ['int64', 'float64']:
        with col2:
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.boxplot(x=data[variable], color='green')
            ax.set_title('Boxplot')
            st.pyplot(fig)

    # KDE (seulement pour les variables num√©riques)
    if data[variable].dtype in ['int64', 'float64']:
        with col3:
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.kdeplot(data[variable], fill=True, color='purple')
            ax.set_title('KDE')
            st.pyplot(fig)

    # Diagramme en barres pour les variables cat√©gorielles
    if data[variable].dtype == 'object':
        fig, ax = plt.subplots(figsize=(12, 8))
        sns.countplot(x=variable, data=data, palette='viridis')
        ax.set_title('Diagramme en barres')
        st.pyplot(fig)

elif choice == 'Analyse bivari√©e':
    
    st.title('Analyse Bivari√©e')
    st.write("""
    ## √Ä propos de cet onglet
    L'analyse bivari√©e est l'√©tude statistique de deux variables pour comprendre la relation entre elles.
    
    ### Caract√©ristiques
    - **Graphique dynamique**: Pour visualiser la relation entre les deux variables s√©lectionn√©es.
    - **Tableau dynamique**: Pour afficher la moyenne de la deuxi√®me variable en fonction de la premi√®re.
    
    ### Comment l'utiliser
    1. **Naviguez** vers cet onglet √† partir du menu lat√©ral.
    2. **S√©lectionnez** les deux variables que vous souhaitez analyser.
    3. **Consultez** le graphique et le tableau pour comprendre la relation entre les variables.
    """)

    # Extraire les colonnes du dataframe
    all_cols = data.columns

    # Afficher les options de s√©lection pour les variables
    var1 = st.selectbox("Choisissez la premi√®re variable", all_cols)
    var2 = st.selectbox("Choisissez la deuxi√®me variable", all_cols)
    color_var = st.selectbox("Choisissez une variable pour le d√©grad√© de couleurs", all_cols, index=0)

    # Choix du type de graphique
    chart_type = st.selectbox("Choisissez le type de graphique", ['Scatter Plot', 'Line Plot', 'Bar Plot', 'Pie Chart', 'Boxplot group√©', 'Violin Plot'])

    # Ajout d'une option pour filtrer les donn√©es
    with st.expander("Filtrer les donn√©es"):
        min_val, max_val = st.slider("Filtrer les donn√©es en fonction de la deuxi√®me variable", float(data[var2].min()), float(data[var2].max()), [float(data[var2].min()), float(data[var2].max())])
        data_filtered = data[(data[var2] >= min_val) & (data[var2] <= max_val)]

    # G√©n√©rer le tableau dynamique
    table = pd.pivot_table(data_filtered, values=var2, index=[var1], aggfunc='mean')
    st.write("Tableau dynamique :")
    st.dataframe(table)

# G√©n√©rer le graphique dynamique
    if chart_type == 'Scatter Plot':
        fig = px.scatter(data_filtered, x=var1, y=var2, color=color_var, 
                     title=f"Scatter Plot de {var1} vs {var2}", 
                     labels={var1: f"{var1} (Axe des X)", var2: f"{var2} (Axe des Y)"})
    elif chart_type == 'Line Plot':
        fig = px.line(data_filtered, x=var1, y=var2, color=color_var, 
                      title=f"Line Plot de {var1} vs {var2}", 
                      labels={var1: f"{var1} (Axe des X)", var2: f"{var2} (Axe des Y)"})
    elif chart_type == 'Bar Plot':
        fig = px.bar(data_filtered, x=var1, y=var2, color=color_var, 
                     title=f"Bar Plot de {var1} vs {var2}", 
                     labels={var1: f"{var1} (Axe des X)", var2: f"{var2} (Axe des Y)"})
    elif chart_type == 'Pie Chart':
        fig = px.pie(data_filtered, names=var1, values=var2, color=color_var, 
                     title=f"Pie Chart de {var1} vs {var2}")
    elif chart_type == 'Boxplot group√©':
        fig = px.box(data_filtered, x=var1, y=var2, color=color_var, 
                     title=f"Boxplot group√© de {var1} vs {var2}", 
                     labels={var1: f"{var1} (Axe des X)", var2: f"{var2} (Axe des Y)"})
    elif chart_type == 'Violin Plot':
        fig = px.violin(data_filtered, x=var1, y=var2, color=color_var, 
                    title=f"Violin Plot de {var1} vs {var2}", 
                    labels={var1: f"{var1} (Axe des X)", var2: f"{var2} (Axe des Y)"})

    st.write(f"{chart_type} :")
    st.plotly_chart(fig)

elif choice == 'Corr√©lation':
    
    st.title('Analyse de Corr√©lation')
    st.write("""
    ## √Ä propos de cet onglet
    L'analyse de corr√©lation est utilis√©e pour √©valuer la force et la direction de la relation lin√©aire entre deux variables quantitatives.
    
    ### Caract√©ristiques
    - **Matrice de corr√©lation**: Affiche les coefficients de corr√©lation entre les variables.
    - **Heatmap**: Pour une repr√©sentation visuelle de la matrice.
    
    ### Comment l'utiliser
    1. **Naviguez** vers cet onglet √† partir du menu lat√©ral.
    2. **Consultez** la matrice de corr√©lation et la heatmap pour comprendre les relations entre les variables.
    """)
    
    # Extraire les colonnes num√©riques du dataframe
    numeric_cols = data.select_dtypes(include=['int64', 'float64']).columns

    # Afficher les options de s√©lection pour les variables
    var1 = st.selectbox("Choisissez la premi√®re variable", numeric_cols)
    var2 = st.selectbox("Choisissez la deuxi√®me variable", numeric_cols)

    # Choix du type de corr√©lation
    corr_type = st.selectbox("Type de corr√©lation", ['Pearson', 'Spearman', 'Kendall'])

    # Ajout d'une option pour filtrer les donn√©es
    with st.expander("Filtrer les donn√©es"):
        min_val1, max_val1 = st.slider(f"Filtrer {var1}", float(data[var1].min()), float(data[var1].max()), [float(data[var1].min()), float(data[var1].max())])
        min_val2, max_val2 = st.slider(f"Filtrer {var2}", float(data[var2].min()), float(data[var2].max()), [float(data[var2].min()), float(data[var2].max())])
        data_filtered = data[(data[var1] >= min_val1) & (data[var1] <= max_val1) & (data[var2] >= min_val2) & (data[var2] <= max_val2)]

    # Calculer la matrice de corr√©lation
    if corr_type == 'Pearson':
        corr = data_filtered[[var1, var2]].corr(method='pearson')
    elif corr_type == 'Spearman':
        corr = data_filtered[[var1, var2]].corr(method='spearman')
    elif corr_type == 'Kendall':
        corr = data_filtered[[var1, var2]].corr(method='kendall')

    # Cr√©er le masque pour √©viter les redondances
    mask = np.ones_like(corr, dtype=bool)
    mask[np.tril_indices_from(mask)] = False

    # Afficher la heatmap avec le masque
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(corr, mask=mask, annot=True, ax=ax)
    plt.title(f'Matrice de Corr√©lation ({corr_type}) entre {var1} et {var2}')
    plt.xlabel(var1)
    plt.ylabel(var2)
    st.pyplot(fig)

    # Interpr√©tation du coefficient de corr√©lation
    coeff = corr.loc[var1, var2]
    if coeff > 0:
        direction = 'positive'
    else:
        direction = 'n√©gative'

    if abs(coeff) < 0.3:
        strength = 'faible'
    elif abs(coeff) < 0.7:
        strength = 'mod√©r√©e'
    else:
        strength = 'forte'

    st.write(f"### Interpr√©tation du Coefficient de Corr√©lation")
    st.write(f"La corr√©lation {direction} entre {var1} et {var2} est {strength} (Coefficient = {coeff:.2f}).")

elif choice == 'Contingence':
    
    st.title('Table de Contingence')
    st.write("""
    ## √Ä propos de cet onglet
    Une table de contingence est un outil statistique utilis√© pour analyser les relations entre deux variables cat√©gorielles.
    
    ### Caract√©ristiques
    - **Table de contingence**: Affiche la distribution crois√©e des donn√©es entre deux variables.
    
    ### Comment l'utiliser
    1. **Naviguez** vers cet onglet √† partir du menu lat√©ral.
    2. **Consultez** la table pour comprendre la relation entre les deux variables cat√©gorielles s√©lectionn√©es.
    """)
    
    # Extraire les colonnes cat√©gorielles du dataframe
    categorical_cols = data.select_dtypes(include=['object', 'bool']).columns

    # Afficher les options de s√©lection pour les variables
    var1 = st.selectbox("Choisissez la premi√®re variable", categorical_cols)
    var2 = st.selectbox("Choisissez la deuxi√®me variable", categorical_cols)

    # Calculer la table de contingence
    table = pd.crosstab(data[var1], data[var2], margins=True)
    
    st.subheader('Table de contingence')
    # Afficher la table de contingence
    st.write(table)

    # Test du chi-carr√©
    chi2, p, dof, expected = chi2_contingency(table)
    st.subheader('Test du chi-carr√©')
    st.write(f"Valeur du chi-carr√© : {chi2}")
    st.write(f"Valeur-p : {p}")
    st.write(f"Nombre de degr√©s de libert√© : {dof}")

    # Interpr√©tation du test du chi-carr√©
    if p < 0.05:
        st.write("üî¥ Les variables sont d√©pendantes (p < 0.05)")
    else:
        st.write("üü¢ Les variables sont ind√©pendantes (p >= 0.05)")

    # Heatmap de la table de contingence
    st.subheader('Heatmap de la table de contingence')
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(table, annot=True, cmap="coolwarm", ax=ax)
    plt.title('Heatmap de la table de contingence')
    plt.xlabel(var1)
    plt.ylabel(var2)
    st.pyplot(fig)

elif choice == 'ANOVA':
    
    st.title('Analyse de la variance (ANOVA)')
    st.write("""
    ## √Ä propos de cet onglet
    L'Analyse de la Variance (ANOVA) est utilis√©e pour analyser les diff√©rences entre les groupes de donn√©es. 
    Elle est particuli√®rement utile pour comparer les moyennes de trois groupes ou plus.
    
    ### Caract√©ristiques
    - **Tableau ANOVA**: Affiche les r√©sultats de l'ANOVA, y compris la valeur F et la valeur p.
    
    ### Comment l'utiliser
    1. **Naviguez** vers cet onglet √† partir du menu lat√©ral.
    2. **Consultez** le tableau ANOVA pour √©valuer si les moyennes de diff√©rents groupes sont statistiquement diff√©rentes.
    """)

    # Extraire les colonnes num√©riques du dataframe
    numeric_cols = data.select_dtypes(include=['int64', 'float64']).columns.tolist()
    categorical_cols = data.select_dtypes(include=['object', 'bool']).columns.tolist()

    # Widgets pour la s√©lection des variables
    dependent_var = st.selectbox("Choisissez la variable d√©pendante", numeric_cols)
    independent_var = st.selectbox("Choisissez la variable ind√©pendante", categorical_cols)

    # Effectuer le test ANOVA
    if st.button("Effectuer le test ANOVA"):
        import scipy.stats as stats

        # Pr√©paration des donn√©es
        categories = data[independent_var].unique()
        data_arrays = [data[dependent_var][data[independent_var] == cat] for cat in categories]

        # Effectuer le test ANOVA
        f_val, p_val = stats.f_oneway(*data_arrays)

        # Afficher les r√©sultats
        st.write(f"Valeur F : {f_val}")
        st.write(f"Valeur p : {p_val}")

        # Interpr√©tation
        if p_val < 0.05:
            st.write("üî¥ Les moyennes des groupes sont significativement diff√©rentes (p < 0.05)")
        else:
            st.write("üü¢ Les moyennes des groupes ne sont pas significativement diff√©rentes (p >= 0.05)")

        fig, ax = plt.subplots(figsize=(12, 6))  # Cr√©er un objet figure et axes
        sns.boxplot(x=independent_var, y=dependent_var, data=data, ax=ax)  # Utiliser l'objet axes
        plt.title('Boxplot des groupes')
        st.pyplot(fig)  # Passer l'objet figure √† st.pyplot()

elif choice == 'Multivari√©s':
    
    st.title('Analyse Multivari√©e')
    st.write("""
    ## √Ä propos de cet onglet
    Cet onglet fournit une analyse multivari√©e des donn√©es, en se concentrant sur les relations entre plusieurs variables √† la fois.
    
    ### Caract√©ristiques
    - **Matrice de corr√©lation**: Pour visualiser les relations entre les variables num√©riques.
    - **Heatmap**: Pour une repr√©sentation visuelle de la matrice de corr√©lation.
    
    ### Comment l'utiliser
    1. **Naviguez** vers cet onglet √† partir du menu lat√©ral.
    2. **Consultez** la matrice de corr√©lation et la heatmap pour comprendre les relations entre les variables.
    3. **Utilisez** ces informations pour des analyses plus approfondies ou pour am√©liorer vos mod√®les de machine learning.
    """)

    # Transformer la colonne promotion_last_5years en objet
    data['promotion_last_5years'] = data['promotion_last_5years'].astype('object')

    # S√©lectionner les colonnes num√©riques
    numerical_columns = data.select_dtypes(include='number').columns.tolist()
    if 'id_colab' in numerical_columns:
        numerical_columns.remove('id_colab')

    # Widget pour s√©lectionner les colonnes
    selected_columns = st.multiselect("S√©lectionnez les variables num√©riques", numerical_columns, default=numerical_columns)

    # Widget pour s√©lectionner le type de corr√©lation
    corr_type = st.selectbox("S√©lectionnez le type de corr√©lation", ["Pearson", "Spearman"])

    # Calculer la matrice de corr√©lation
    if corr_type == "Pearson":
        corr_matrix = data[selected_columns].corr(method='pearson')
    else:
        corr_matrix = data[selected_columns].corr(method='spearman')

    # Affichage Matrice Correlation
        st.write(corr_matrix.round(4))

        # Menu d√©roulant pour la s√©lection des variables
        var1 = st.selectbox("Choisissez la premi√®re variable pour l'interpr√©tation", corr_matrix.columns)
        var2 = st.selectbox("Choisissez la deuxi√®me variable pour l'interpr√©tation", corr_matrix.columns)

        if var1 != var2:
            corr_value = corr_matrix.loc[var1, var2]
            interpretation, color = interpret_correlation(corr_value)
            st.markdown(f"La corr√©lation entre **{var1}** et **{var2}** est : <span style='color:{color};'>{interpretation}</span>", unsafe_allow_html=True)
        else:
            st.write("Veuillez s√©lectionner deux variables diff√©rentes pour l'interpr√©tation.")


        st.subheader('Heatmap de la corr√©lation de cette matrice.')
        fig, ax = plt.subplots(figsize=(10, 8))  # Taille personnalis√©e
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)
        plt.title('Heatmap de Corr√©lation')
        st.pyplot(fig)
    
elif choice == 'R√©gression logistique':
    
    st.title('R√©gression logistique')
    st.write("""
    ## √Ä propos de cet onglet
    Dans cet onglet, nous utilisons un mod√®le de r√©gression logistique pour pr√©dire si un employ√© va quitter l'entreprise ou non.
    
    ### Caract√©ristiques
    - **Matrice de confusion**: Pour √©valuer la performance du mod√®le.
    - **Rapport de classification**: Pour obtenir des m√©triques cl√©s comme la pr√©cision, le rappel, etc.
    - **Pr√©diction pour chaque employ√©**: Une table montrant les pr√©dictions du mod√®le pour chaque employ√©.
    
    ### Comment l'utiliser
    1. **Naviguez** vers cet onglet √† partir du menu lat√©ral.
    2. **Consultez** les m√©triques pour √©valuer la performance du mod√®le.
    3. **Analysez** la table de pr√©diction pour prendre des d√©cisions bas√©es sur les donn√©es.
    """)

    # S√©lectionner les colonnes pertinentes pour la r√©gression logistique
    df = data[['satisfaction_level', 'last_evaluation', 'number_project', 'average_montly_hours', 'time_spend_company', 'work_accident', 'promotion_last_5years', 'left']]
    
    # Convertir la variable 'promotion_last_5years' en entier
    df['promotion_last_5years'] = pd.to_numeric(df['promotion_last_5years'], errors='coerce')
    
    # Remplacer les valeurs bool√©ennes de la colonne 'left' par des entiers (0 ou 1)
    df['left'] = df['left'].apply(lambda x: 1 if x else 0)

    # S√©parer les donn√©es en variables ind√©pendantes (X) et d√©pendante (y)
    X = df.drop('left', axis=1)
    y = df['left']

    # Cr√©er un mod√®le de r√©gression logistique avec un param√®tre de r√©gularisation
    model = LogisticRegression(C=0.95)

    # Entra√Æner le mod√®le sur les donn√©es
    model.fit(X, y)

    # Pr√©dire les tendances pour les donn√©es de test
    y_pred = model.predict(X)

    # Afficher la matrice de confusion avec un code couleur
    st.subheader('Matrice de confusion')
    cm = confusion_matrix(y, y_pred)
    fig, ax = plt.subplots(figsize=(5, 5))
    sns.heatmap(cm, annot=True, cmap="coolwarm", fmt="d", cbar=False, ax=ax)
    st.pyplot(fig)


    # Afficher le rapport de classification
    st.subheader('Rapport de classification')
    report = classification_report(y, y_pred)
    st.text(report)

    # Ajouter une interactivit√© pour l'interpr√©tation des r√©sultats
    selected_metric = st.selectbox("Choisissez une m√©trique pour l'interpr√©tation", ["Pr√©cision", "Rappel", "Score F1"])
    if selected_metric == "Pr√©cision":
        st.write(f"La pr√©cision du mod√®le est de {precision_score(y, y_pred):.2f}")
    elif selected_metric == "Rappel":
        st.write(f"Le rappel du mod√®le est de {recall_score(y, y_pred):.2f}")
    elif selected_metric == "Score F1":
        st.write(f"Le score F1 du mod√®le est de {f1_score(y, y_pred):.2f}")

    # Afficher la pr√©diction de tendance pour chaque employ√©
    st.subheader('Pr√©diction de tendance pour chaque employ√©')
    pred_df = pd.DataFrame({'Tendance r√©elle': y, 'Tendance pr√©vue': y_pred})
    st.write(pred_df)

    # Calculer les m√©triques
    recall = recall_score(y, y_pred)
    precision = precision_score(y, y_pred)
    f1 = f1_score(y, y_pred)
    
    # Afficher les m√©triques
    st.subheader('M√©triques du mod√®le')
    st.write(f"Le rappel du mod√®le est de {recall:.2f}")
    st.write(f"La pr√©cision du mod√®le est de {precision:.2f}")
    st.write(f"Le score F1 du mod√®le est de {f1:.2f}")
    
    # Interpr√©tation logique
    st.subheader('Interpr√©tation du mod√®le')
    if recall > 0.8 and precision > 0.8:
        st.success("Le mod√®le est tr√®s performant.")
    elif recall > 0.8:
        st.warning("Le mod√®le a un bon rappel mais une pr√©cision faible. Il pourrait y avoir des faux positifs.")
    elif precision > 0.8:
        st.warning("Le mod√®le a une bonne pr√©cision mais un rappel faible. Il pourrait y avoir des faux n√©gatifs.")
    else:
        st.error("Le mod√®le a besoin d'√™tre am√©lior√©.")